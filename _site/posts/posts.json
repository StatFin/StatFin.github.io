[
  {
    "path": "posts/2021-04-23-numpy-tutorial/",
    "title": "An Introduction to Python's NumPy Package",
    "description": "This tutorial is tailored for beginners who want to master the basics of NumPy package.",
    "author": [
      {
        "name": "Cephas Svosve",
        "url": "https://www.inet.ox.ac/people/cephas-svosve"
      }
    ],
    "date": "2021-04-23",
    "categories": [],
    "contents": "\n\n\n\nLoading NumPy library\n\nimport numpy as np\n\nCreating NumPy arrays from python Lists\n\nl = [1,2,3,4,5]\n# Why do we have to put lists as numpy objects rather than use them as they are?\nnp.arr = np.array(l) \nnp.arr\narray([1, 2, 3, 4, 5])\n\n\ntype(np.arr)\n<class 'numpy.ndarray'>\n\n\nnp.mat('1 2; 3 4; 5 6')\nmatrix([[1, 2],\n        [3, 4],\n        [5, 6]])\n\n\n# from numpy matrix to numpy array\n\nnp.array(np.mat('1 2; 3 4; 5 6'))\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n#a = np.array(1,2,3,4,5,6) # wrong because the argument is not a list\na = np.array([1,2,3,4,5,6]) # correct\n\nType Casting\n\n# items in list are maintained in their original states\nl = [1,2,3.0] \nl\n[1, 2, 3.0]\n\n\n# items in the list all become floats\na = np.array([1,2,3.0])\na\narray([1., 2., 3.])\n\n\nprint(np.array([1,2,3], dtype = float))\n[1. 2. 3.]\n\n\nprint(np.array([1,2,3], dtype = 'U'))\n['1' '2' '3']\nprint(np.array([12345,2,3], dtype = '<U2'))\n['12' '2' '3']\nprint(np.array([1,2,3], dtype = complex))\n[1.+0.j 2.+0.j 3.+0.j]\n\n\nx = np.array([('Cephas',24, 1000.1), ('Temwanani', 25,4000.4)], dtype = [('name', '<U11'),('age','int'), ('salary', 'f4')])\n\n\nprint(x)\n[('Cephas', 24, 1000.1) ('Temwanani', 25, 4000.4)]\n\n\nprint('Row 1', x[0])\nRow 1 ('Cephas', 24, 1000.1)\nprint('Row 2', x[1])\nRow 2 ('Temwanani', 25, 4000.4)\n\n\nx = np.array([('Cephas',24, 1000.1), \n              ('Temwanani', 25,4000.4),\n             ('Caiphas',24, 1500.12), \n             ('Tinashe',22, 1150.80), ], dtype = [('name', '<U11'),('age','int'), ('salary', 'f4')])\n\nprint(x)\n[('Cephas', 24, 1000.1 ) ('Temwanani', 25, 4000.4 )\n ('Caiphas', 24, 1500.12) ('Tinashe', 22, 1150.8 )]\n\n\nfor i in range(4):\n    print('Row ', i, x[i])\nRow  0 ('Cephas', 24, 1000.1)\nRow  1 ('Temwanani', 25, 4000.4)\nRow  2 ('Caiphas', 24, 1500.12)\nRow  3 ('Tinashe', 22, 1150.8)\n\n\nx = np.array([('Cephas',24, 1000.1), \n              ('Temwanani', 25,4000.4),\n             ('Caiphas',24, 1500.12), \n             ('Tinashe',22, 1150.80), ], dtype = [('name', '<U2'),('age','U'), ('salary', 'f')])\n\n\nfor i in range(4):\n    print('Row ',i ,x[i])\nRow  0 ('Ce', '', 1000.1)\nRow  1 ('Te', '', 4000.4)\nRow  2 ('Ca', '', 1500.12)\nRow  3 ('Ti', '', 1150.8)\n\n\nx = np.array([('Cephas',24, 1000.1), \n              ('Temwanani', 25,4000.4),\n             ('Caiphas',24, 1500.12), \n             ('Tinashe',22, 1150.80), ], dtype = [('name', '<U2'),('age','int32'), ('salary', 'f')])\n\n\nfor i in range(4):\n    print('Row ',i ,x[i])\nRow  0 ('Ce', 24, 1000.1)\nRow  1 ('Te', 25, 4000.4)\nRow  2 ('Ca', 24, 1500.12)\nRow  3 ('Ti', 22, 1150.8)\n\nTwo Dimensional Array\n\n[(1,5,2,3),(4,5,6)]\n[(1, 5, 2, 3), (4, 5, 6)]\n\n\ntwo_arr = np.array([(1,2,3),(4,5,7),(0,2,8)])\ntwo_arr1= two_arr\ntwo_arr\narray([[1, 2, 3],\n       [4, 5, 7],\n       [0, 2, 8]])\n\n\nnp.mat(two_arr)\nmatrix([[1, 2, 3],\n        [4, 5, 7],\n        [0, 2, 8]])\n\n\nprint('Shape of 2-D Array is ', two_arr.shape)\nShape of 2-D Array is  (3, 3)\n\n\nprint('Number of Dimensions for 2-D Array is ', two_arr.ndim)\nNumber of Dimensions for 2-D Array is  2\n\n\nprint('The data type for the 2-D Array is ', two_arr.dtype)\nThe data type for the 2-D Array is  int64\n\n\nprint('The size of the 2-D Array is ', two_arr.size)\nThe size of the 2-D Array is  9\n\nThree Dimensional Array\n\nthree_arr = np.array([[[1,2,3],\n                       [3,4,2],\n                       [3,2,1]],\n                      \n                      [[2,1,3],\n                       [0,0,2], \n                       [3,4,5]],\n                     \n                     [[3,6,8],\n                      [4,0,1],\n                      [0,1,0]]])\n\n\nthree_arr\narray([[[1, 2, 3],\n        [3, 4, 2],\n        [3, 2, 1]],\n\n       [[2, 1, 3],\n        [0, 0, 2],\n        [3, 4, 5]],\n\n       [[3, 6, 8],\n        [4, 0, 1],\n        [0, 1, 0]]])\n\n\nprint(\"Shape of 3-D Array is \", three_arr.shape)\nShape of 3-D Array is  (3, 3, 3)\n\n\nprint('Size of 3-D Array is ', three_arr.size)\nSize of 3-D Array is  27\n\n\nprint('Number of Dimensions for 3-D Array is ', three_arr.ndim)\nNumber of Dimensions for 3-D Array is  3\n\n\nprint(\"Type of 3-D Array is \", three_arr.dtype)\nType of 3-D Array is  int64\n\nImportant Functions in NumPy\n\nnp.zeros((4,4))\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\nnp.mat(np.zeros((9,9)))\nmatrix([[0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0.]])\n\n\nnp.ones((3,5))\narray([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])\n\n\nl = np.random.randn(9)\n\nprint(l.reshape((3,3)))\n[[-0.98331233 -0.10951978  0.45015927]\n [ 0.29755799  1.16197099 -1.57131675]\n [-1.47534434 -0.2386963  -0.49271224]]\nprint('-'*10)\n----------\nprint(np.empty((3,3)))\n[[0.98331233 0.10951978 0.45015927]\n [0.29755799 1.16197099 1.57131675]\n [1.47534434 0.2386963  0.49271224]]\n\n\nnp.eye(3)\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\nA = np.eye(3)\nB = two_arr1\n\nprint(type(two_arr1))\n<class 'numpy.ndarray'>\nprint('\\n', A.dot(B))\n\n [[1. 2. 3.]\n [4. 5. 7.]\n [0. 2. 8.]]\nprint('\\n', A*B)\n\n [[1. 0. 0.]\n [0. 5. 0.]\n [0. 0. 8.]]\n\n\nprint(np.diag(B))\n[1 5 8]\n\n\nnp.arange(1,10,1)\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nnp.arange(1,100,2.5)\narray([ 1. ,  3.5,  6. ,  8.5, 11. , 13.5, 16. , 18.5, 21. , 23.5, 26. ,\n       28.5, 31. , 33.5, 36. , 38.5, 41. , 43.5, 46. , 48.5, 51. , 53.5,\n       56. , 58.5, 61. , 63.5, 66. , 68.5, 71. , 73.5, 76. , 78.5, 81. ,\n       83.5, 86. , 88.5, 91. , 93.5, 96. , 98.5])\n\n\nnp.linspace(1,10,100000000)\narray([ 1.        ,  1.00000009,  1.00000018, ...,  9.99999982,\n        9.99999991, 10.        ])\n\n\nx = np.linspace(0,2*np.pi,100)\nf_x = np.sin(x)\n\n\n\n\n",
    "preview": "posts/2021-04-23-numpy-tutorial/distill-preview.png",
    "last_modified": "2021-04-23T12:01:29-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-01-26-basics-of-probability/",
    "title": "Basics of Probability",
    "description": "In this tutorial, we walk through the basics of classification in R using the famous\nTitanic dataset from Kaggle. The tutorial starts with the basic concepts of data wrangling and   exploration in R before it weaves into the actual classification. Read on..",
    "author": [
      {
        "name": "Wilson Sithole",
        "url": "https://example.com"
      },
      {
        "name": "Cephas Svosve",
        "url": "https://example.com"
      },
      {
        "name": "Blessing Nyatsanza",
        "url": "https://example.com"
      }
    ],
    "date": "2021-01-26",
    "categories": [
      "statistical inference",
      "bayes theorem",
      "maximum likelihood"
    ],
    "contents": "\n\nContents\nExploratory Data Analysis and Cleaning\nDealing with the names\nModeling with rpart and caret\nModel Perfomance Metrics\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n\n\n#read in the data \ntrain <- read.csv(\"~/Desktop/Kaggle_Datasets/train.csv\")\ntest <- read.csv(\"~/Desktop/Kaggle_Datasets/test.csv\")\nstr(train)\n\n\n'data.frame':   891 obs. of  12 variables:\n $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n $ Name       : chr  \"Braund, Mr. Owen Harris\" \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\" \"Heikkinen, Miss. Laina\" \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\" ...\n $ Sex        : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n $ Ticket     : chr  \"A/5 21171\" \"PC 17599\" \"STON/O2. 3101282\" \"113803\" ...\n $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n $ Cabin      : chr  \"\" \"C85\" \"\" \"C123\" ...\n $ Embarked   : chr  \"S\" \"C\" \"S\" \"S\" ...\n\nstr(test)\n\n\n'data.frame':   418 obs. of  11 variables:\n $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...\n $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...\n $ Name       : chr  \"Kelly, Mr. James\" \"Wilkes, Mrs. James (Ellen Needs)\" \"Myles, Mr. Thomas Francis\" \"Wirz, Mr. Albert\" ...\n $ Sex        : chr  \"male\" \"female\" \"male\" \"male\" ...\n $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...\n $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...\n $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...\n $ Ticket     : chr  \"330911\" \"363272\" \"240276\" \"315154\" ...\n $ Fare       : num  7.83 7 9.69 8.66 12.29 ...\n $ Cabin      : chr  \"\" \"\" \"\" \"\" ...\n $ Embarked   : chr  \"Q\" \"S\" \"Q\" \"S\" ...\n\n#is.na.data.frame(train)\n\n\n\nExploratory Data Analysis and Cleaning\n\n\n#join train and test data\nltrain <- nrow(train)\nnew.test<- test%>%\n          dplyr::mutate(Survived = \"1\") # to be deleted before final predictions are made \nfull <- rbind(train, new.test) \n\n#change Pclass, Survived to factors \nfull$Survived = factor(full$Survived)\nfull$Pclass = factor(full$Pclass) \n\n#missing values\nsapply(full, function(x) sum(is.na(x)))\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n        263           0           0           0           1 \n      Cabin    Embarked \n          0           0 \n\ncolSums(full == \"\")\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n         NA           0           0           0          NA \n      Cabin    Embarked \n       1014           2 \n\n#impute missing values \nfull$Embarked[full$Embarked == \"\"] = \"C\"\nmean_age <- mean(full$Age, na.rm = T)\nsd_age <- sd(full$Age, na.rm = T) \nfull$Age[is.na(full$Age)] = runif(1, mean_age - sd_age, mean_age + sd_age)\nfull$Fare[is.na(full$Fare)] = mean(full$Fare, na.rm = T)\n\n\n\nSome plots to visualize the relationships between our label and the features More females survived both number-wise and proportion-wise. Class 1 had the highest proportion of survivors, followed by class 2 and lastly class 3. The majority of passengers who embarked at station S did not survive. Age seems like a good feature.Younger ages survived more. Those with FEWER siblings + spouses tended to survive.\nDealing with the names\n\n\nofficers <- c(\" Capt\",' Col',' Don',' Dr',' Jonkheer',' Major',' Rev',' Sir',' the Countess')\nfull <- full %>%\n   mutate(Title_B = gsub('(.*,)|(\\\\..*)', '', Name))%>%\n   mutate(Title = dplyr::case_when(\n                      Title_B == \" Mlle\" ~ \" Miss\",\n                      Title_B == \" Ms\" ~ \" Miss\",\n                      Title_B == \" Mme\" ~ \" Mrs\",\n                      Title_B == \" Lady\" ~ \" Miss\",\n                      Title_B == \" Dona\" ~ \" Miss\",\n                      Title_B %in% officers ~ \"Officer\",\n                      TRUE ~ Title_B\n  ))\nfull$Title = factor(full$Title)\n\n\n\nLadies survived at a higher frequency than men. Masters survived at a higher rate than ordinary men.\nModeling with rpart and caret\n\n\n#creating train and test sets\ntrain.new <- full[1:ltrain,]\nltest <- ltrain+1\ntest.new <- full[ltest: nrow(full),]\nin.train <- createDataPartition(train.new$Survived, p=0.80,list=FALSE)\ntrainset <- train.new[in.train,]\ntestset <- train.new[-in.train,]\n#parallel programming \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n#fit the model \nset.seed(1)\nmodel <- rpart(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n               data = trainset,\n               method = \"class\")\n#stop clusters \nstopCluster(cl) \n#rpart.plot(model) \n\n\n\nModel Perfomance Metrics\n\n\npredictions <- predict(model, testset, type = \"class\")\nmean(predictions == testset$Survived) # accuracy score \n\n\n[1] 0.8248588\n\nt2 <- table(predictions, testset$Survived) \nt2 \n\n\n           \npredictions  0  1\n          0 97 19\n          1 12 49\n\nprecision <- t2[1,1]/sum(t2[1,])\nrecall <- t2[1,1]/sum(t2[,1])\nF1_score <- 2*precision*recall/(precision + recall)\nprecision\n\n\n[1] 0.8362069\n\nrecall\n\n\n[1] 0.8899083\n\nF1_score\n\n\n[1] 0.8622222\n\n#ROC\npROC_obj <- roc(testset$Survived, as.numeric(predictions),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-26-basics-of-probability/basics-of-probability_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2021-01-26T06:18:26-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-01-26-neural-networks/",
    "title": "Neural Networks",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Wilson Sithole",
        "url": "https://example.com"
      },
      {
        "name": "Cephas Svosve",
        "url": "https://example.com"
      },
      {
        "name": "Blessing Nyatsanza",
        "url": "https://example.com"
      }
    ],
    "date": "2021-01-26",
    "categories": [],
    "contents": "\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"\n\n\n#read in the data \ntrain <- read.csv(\"~/Desktop/Kaggle_Datasets/train.csv\")\ntest <- read.csv(\"~/Desktop/Kaggle_Datasets/test.csv\")\nstr(train)\n\n\n'data.frame':   891 obs. of  12 variables:\n $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n $ Name       : chr  \"Braund, Mr. Owen Harris\" \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\" \"Heikkinen, Miss. Laina\" \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\" ...\n $ Sex        : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n $ Ticket     : chr  \"A/5 21171\" \"PC 17599\" \"STON/O2. 3101282\" \"113803\" ...\n $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n $ Cabin      : chr  \"\" \"C85\" \"\" \"C123\" ...\n $ Embarked   : chr  \"S\" \"C\" \"S\" \"S\" ...\n\nstr(test)\n\n\n'data.frame':   418 obs. of  11 variables:\n $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...\n $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...\n $ Name       : chr  \"Kelly, Mr. James\" \"Wilkes, Mrs. James (Ellen Needs)\" \"Myles, Mr. Thomas Francis\" \"Wirz, Mr. Albert\" ...\n $ Sex        : chr  \"male\" \"female\" \"male\" \"male\" ...\n $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...\n $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...\n $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...\n $ Ticket     : chr  \"330911\" \"363272\" \"240276\" \"315154\" ...\n $ Fare       : num  7.83 7 9.69 8.66 12.29 ...\n $ Cabin      : chr  \"\" \"\" \"\" \"\" ...\n $ Embarked   : chr  \"Q\" \"S\" \"Q\" \"S\" ...\n\n#is.na.data.frame(train)\n\n\n\nExploratory Data Analysis and Cleaning\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n\n\n#join train and test data\nltrain <- nrow(train)\nnew.test<- test%>%\n          dplyr::mutate(Survived = \"1\") # to be deleted before final predictions are made \nfull <- rbind(train, new.test) \n\n#change Pclass, Survived to factors \nfull$Survived = factor(full$Survived)\nfull$Pclass = factor(full$Pclass) \n\n#missing values\nsapply(full, function(x) sum(is.na(x)))\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n        263           0           0           0           1 \n      Cabin    Embarked \n          0           0 \n\ncolSums(full == \"\")\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n         NA           0           0           0          NA \n      Cabin    Embarked \n       1014           2 \n\n#impute missing values \nfull$Embarked[full$Embarked == \"\"] = \"C\"\nmean_age <- mean(full$Age, na.rm = T)\nsd_age <- sd(full$Age, na.rm = T) \nfull$Age[is.na(full$Age)] = runif(1, mean_age - sd_age, mean_age + sd_age)\nfull$Fare[is.na(full$Fare)] = mean(full$Fare, na.rm = T)\n\n\n\nSome plots to visualize the relationships between our label and the features At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\nDealing with the names\n\n\nofficers <- c(\" Capt\",' Col',' Don',' Dr',' Jonkheer',' Major',' Rev',' Sir',' the Countess')\nfull <- full %>%\n   mutate(Title_B = gsub('(.*,)|(\\\\..*)', '', Name))%>%\n   mutate(Title = dplyr::case_when(\n                      Title_B == \" Mlle\" ~ \" Miss\",\n                      Title_B == \" Ms\" ~ \" Miss\",\n                      Title_B == \" Mme\" ~ \" Mrs\",\n                      Title_B == \" Lady\" ~ \" Miss\",\n                      Title_B == \" Dona\" ~ \" Miss\",\n                      Title_B %in% officers ~ \"Officer\",\n                      TRUE ~ Title_B\n  ))\nfull$Title = factor(full$Title)\n\n\n\nLadies survived at a higher frequency than men. Masters survived at a higher rate than ordinary men.\nModeling with rpart and caret\n\n\n#creating train and test sets\ntrain.new <- full[1:ltrain,]\nltest <- ltrain+1\ntest.new <- full[ltest: nrow(full),]\nin.train <- createDataPartition(train.new$Survived, p=0.80,list=FALSE)\ntrainset <- train.new[in.train,]\ntestset <- train.new[-in.train,]\n\n#parallel programming \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n\n#fit the model \nset.seed(1)\nmodel <- rpart(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n               data = trainset,\n               method = \"class\")\n    \n#stop clusters \nstopCluster(cl) \n\n#plot\nrpart.plot(model) \n\n\n\n\nModel Perfomance Metrics\n\n\npredictions <- predict(model, testset, type = \"class\")\nmean(predictions == testset$Survived) # accuracy score \n\n\n[1] 0.8531073\n\nt2 <- table(predictions, testset$Survived) # contingency table \nt2 \n\n\n           \npredictions   0   1\n          0 101  18\n          1   8  50\n\nprecision <- t2[1,1]/sum(t2[1,])\nrecall <- t2[1,1]/sum(t2[,1])\nF1_score <- 2*precision*recall/(precision + recall)\nprecision\n\n\n[1] 0.8487395\n\nrecall\n\n\n[1] 0.9266055\n\nF1_score\n\n\n[1] 0.8859649\n\n#ROC\n\npROC_obj <- roc(testset$Survived, as.numeric(predictions),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\nRandom forest\n\n\nset.seed(3567)\n#parallel \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n\nrf_model <- randomForest(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n                         data = trainset,\n                         importance = T,#performance boost\n                         proximity = F,#performance boost\n                         ntrees = 120, \n                         mtry = 3\n                         )\n#stop clusters \nstopCluster(cl) \n\n#Errors \n#plot(rf_model)\nrf_model\n\n\n\nCall:\n randomForest(formula = Survived ~ Pclass + Sex + Fare + Embarked +      Title + Age, data = trainset, importance = T, proximity = F,      ntrees = 120, mtry = 3) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 3\n\n        OOB estimate of  error rate: 17.93%\nConfusion matrix:\n    0   1 class.error\n0 388  52   0.1181818\n1  76 198   0.2773723\n\n\n\npredictions_rf <- predict(rf_model, testset, type = \"class\")\nmean(predictions_rf == testset$Survived) # accuracy score \n\n\n[1] 0.8644068\n\nt2 <- table(predictions_rf, testset$Survived) # contingency table \nt2 \n\n\n              \npredictions_rf   0   1\n             0 101  16\n             1   8  52\n\nprecision_rf <- t2[1,1]/sum(t2[1,])\nrecall_rf <- t2[1,1]/sum(t2[,1])\nF1_score_rf <- 2*precision*recall/(precision + recall)\nprecision_rf\n\n\n[1] 0.8632479\n\nrecall_rf\n\n\n[1] 0.9266055\n\nF1_score_rf\n\n\n[1] 0.8859649\n\n#ROC curve\nlibrary(pROC)\npROC_obj <- roc(testset$Survived, as.numeric(predictions_rf),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-26-neural-networks/neural-networks_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-01-26T20:42:25-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-01-26-random-forests/",
    "title": "Random Forests",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Wilson Sithole",
        "url": "https://example.com"
      },
      {
        "name": "Cephas Svosve",
        "url": "https://example.com"
      },
      {
        "name": "Blessing Nyatsanza",
        "url": "https://example.com"
      }
    ],
    "date": "2021-01-26",
    "categories": [],
    "contents": "\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"\n\n\n#read in the data \ntrain <- read.csv(\"~/Desktop/Kaggle_Datasets/train.csv\")\ntest <- read.csv(\"~/Desktop/Kaggle_Datasets/test.csv\")\nstr(train)\n\n\n'data.frame':   891 obs. of  12 variables:\n $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n $ Name       : chr  \"Braund, Mr. Owen Harris\" \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\" \"Heikkinen, Miss. Laina\" \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\" ...\n $ Sex        : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n $ Ticket     : chr  \"A/5 21171\" \"PC 17599\" \"STON/O2. 3101282\" \"113803\" ...\n $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n $ Cabin      : chr  \"\" \"C85\" \"\" \"C123\" ...\n $ Embarked   : chr  \"S\" \"C\" \"S\" \"S\" ...\n\nstr(test)\n\n\n'data.frame':   418 obs. of  11 variables:\n $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...\n $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...\n $ Name       : chr  \"Kelly, Mr. James\" \"Wilkes, Mrs. James (Ellen Needs)\" \"Myles, Mr. Thomas Francis\" \"Wirz, Mr. Albert\" ...\n $ Sex        : chr  \"male\" \"female\" \"male\" \"male\" ...\n $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...\n $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...\n $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...\n $ Ticket     : chr  \"330911\" \"363272\" \"240276\" \"315154\" ...\n $ Fare       : num  7.83 7 9.69 8.66 12.29 ...\n $ Cabin      : chr  \"\" \"\" \"\" \"\" ...\n $ Embarked   : chr  \"Q\" \"S\" \"Q\" \"S\" ...\n\n#is.na.data.frame(train)\n\n\n\nExploratory Data Analysis and Cleaning\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n\n\n#join train and test data\nltrain <- nrow(train)\nnew.test<- test%>%\n          dplyr::mutate(Survived = \"1\") # to be deleted before final predictions are made \nfull <- rbind(train, new.test) \n\n#change Pclass, Survived to factors \nfull$Survived = factor(full$Survived)\nfull$Pclass = factor(full$Pclass) \n\n#missing values\nsapply(full, function(x) sum(is.na(x)))\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n        263           0           0           0           1 \n      Cabin    Embarked \n          0           0 \n\ncolSums(full == \"\")\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n         NA           0           0           0          NA \n      Cabin    Embarked \n       1014           2 \n\n#impute missing values \nfull$Embarked[full$Embarked == \"\"] = \"C\"\nmean_age <- mean(full$Age, na.rm = T)\nsd_age <- sd(full$Age, na.rm = T) \nfull$Age[is.na(full$Age)] = runif(1, mean_age - sd_age, mean_age + sd_age)\nfull$Fare[is.na(full$Fare)] = mean(full$Fare, na.rm = T)\n\n\n\nSome plots to visualize the relationships between our label and the features At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\nsex\n\n\nggplot(full[1:ltrain,], aes(x = Sex, fill = Survived)) + geom_bar()\n\n\n\n\nMore females survived both number-wise and proportion-wise.\nPclass\n\n\nggplot(full[1:ltrain,], aes(x = Pclass, fill = Survived)) + geom_bar()\n\n\n\n\nClass 1 had the highest proportion of survivors, followed by class 2 and lastly class 3.\nEmbarked\n\n\nggplot(full[1:ltrain,], aes(x = Embarked, fill = Survived)) + geom_bar()\n\n\n\n\nThe majority of passengers who embarked at station S did not survive.\nAge\n\n\nggplot(full[1:ltrain,], aes(x = Age, fill = Survived)) + geom_histogram()\n\n\n\n\nAge seems like a good feature.Younger ages survived more.\nSibSp\n\n\nggplot(full[1:ltrain,], aes(x = SibSp, fill = Survived)) + geom_histogram()\n\n\n\n\nThose with FEWER siblings + spouses tended to survive\nParch\n\n\nggplot(full[1:ltrain,], aes(x = Parch, fill = Survived)) + geom_histogram()\n\n\n\n\nFare\n\n\nggplot(full[1:ltrain,], aes(x = Fare, fill = Survived)) + geom_histogram()\n\n\n\n\nDealing with the names\n\n\nofficers <- c(\" Capt\",' Col',' Don',' Dr',' Jonkheer',' Major',' Rev',' Sir',' the Countess')\nfull <- full %>%\n   mutate(Title_B = gsub('(.*,)|(\\\\..*)', '', Name))%>%\n   mutate(Title = dplyr::case_when(\n                      Title_B == \" Mlle\" ~ \" Miss\",\n                      Title_B == \" Ms\" ~ \" Miss\",\n                      Title_B == \" Mme\" ~ \" Mrs\",\n                      Title_B == \" Lady\" ~ \" Miss\",\n                      Title_B == \" Dona\" ~ \" Miss\",\n                      Title_B %in% officers ~ \"Officer\",\n                      TRUE ~ Title_B\n  ))\nfull$Title = factor(full$Title)\n\n#hist of titles \n\nggplot(full[1:ltrain,], aes(x = Title , fill = Survived)) + geom_bar(position =\"fill\") + ylab(\"Frequency\")\n\n\n\n\nLadies survived at a higher frequency than men. Masters survived at a higher rate than ordinary men.\nModeling with rpart and caret\n\n\n#creating train and test sets\ntrain.new <- full[1:ltrain,]\nltest <- ltrain+1\ntest.new <- full[ltest: nrow(full),]\nin.train <- createDataPartition(train.new$Survived, p=0.80,list=FALSE)\ntrainset <- train.new[in.train,]\ntestset <- train.new[-in.train,]\n\n#parallel programming \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n\n#fit the model \nset.seed(1)\nmodel <- rpart(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n               data = trainset,\n               method = \"class\")\n    \n#stop clusters \nstopCluster(cl) \n\n#plot\nrpart.plot(model) \n\n\n\n\nModel Perfomance Metrics\n\n\npredictions <- predict(model, testset, type = \"class\")\nmean(predictions == testset$Survived) # accuracy score \n\n\n[1] 0.8079096\n\nt2 <- table(predictions, testset$Survived) # contingency table \nt2 \n\n\n           \npredictions   0   1\n          0 104  29\n          1   5  39\n\nprecision <- t2[1,1]/sum(t2[1,])\nrecall <- t2[1,1]/sum(t2[,1])\nF1_score <- 2*precision*recall/(precision + recall)\nprecision\n\n\n[1] 0.7819549\n\nrecall\n\n\n[1] 0.9541284\n\nF1_score\n\n\n[1] 0.8595041\n\n#ROC\n\npROC_obj <- roc(testset$Survived, as.numeric(predictions),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\nRandom forest\n\n\nset.seed(3567)\n#parallel \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n\nrf_model <- randomForest(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n                         data = trainset,\n                         importance = T,#performance boost\n                         proximity = F,#performance boost\n                         ntrees = 120, \n                         mtry = 3\n                         )\n#stop clusters \nstopCluster(cl) \n\n#Errors \n#plot(rf_model)\nrf_model\n\n\n\nCall:\n randomForest(formula = Survived ~ Pclass + Sex + Fare + Embarked +      Title + Age, data = trainset, importance = T, proximity = F,      ntrees = 120, mtry = 3) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 3\n\n        OOB estimate of  error rate: 15.83%\nConfusion matrix:\n    0   1 class.error\n0 401  39  0.08863636\n1  74 200  0.27007299\n\n\n\npredictions_rf <- predict(rf_model, testset, type = \"class\")\nmean(predictions_rf == testset$Survived) # accuracy score \n\n\n[1] 0.8135593\n\nt2 <- table(predictions_rf, testset$Survived) # contingency table \nt2 \n\n\n              \npredictions_rf   0   1\n             0 100  24\n             1   9  44\n\nprecision_rf <- t2[1,1]/sum(t2[1,])\nrecall_rf <- t2[1,1]/sum(t2[,1])\nF1_score_rf <- 2*precision*recall/(precision + recall)\nprecision_rf\n\n\n[1] 0.8064516\n\nrecall_rf\n\n\n[1] 0.9174312\n\nF1_score_rf\n\n\n[1] 0.8595041\n\n#ROC curve\nlibrary(pROC)\npROC_obj <- roc(testset$Survived, as.numeric(predictions_rf),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-26-random-forests/random-forests_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-01-26T20:40:59-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-01-26-the-sharpe-ratio/",
    "title": "The Sharpe Ratio",
    "description": "In this tutorial we present a classic finance use case using the\nPerformanceAnalytics, quantmod, and dygraphs packages. \nWe'll demonstrate importing stock data, building a portfolio,\nand then calculating the Sharpe Ratio.",
    "author": [
      {
        "name": "Wilson Sithole",
        "url": "https://example.com"
      },
      {
        "name": "Cephas Svosve",
        "url": "https://example.com"
      },
      {
        "name": "Blessing Nyatsanza",
        "url": "https://example.com"
      }
    ],
    "date": "2021-01-26",
    "categories": [
      "statistical inference",
      "machine learning",
      "classification",
      "black scholes"
    ],
    "contents": "\n\nContents\nExploratory Data Analysis and Cleaning\nsex\nPclass\nEmbarked\nAge\nSibSp\nParch\nFare\n\nDealing with the names\nModeling with rpart and caret\nModel Perfomance Metrics\nRandom forest\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"\n\n\n#read in the data \ntrain <- read.csv(\"~/Desktop/Kaggle_Datasets/train.csv\")\ntest <- read.csv(\"~/Desktop/Kaggle_Datasets/test.csv\")\nstr(train)\n\n\n'data.frame':   891 obs. of  12 variables:\n $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n $ Name       : chr  \"Braund, Mr. Owen Harris\" \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\" \"Heikkinen, Miss. Laina\" \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\" ...\n $ Sex        : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n $ Ticket     : chr  \"A/5 21171\" \"PC 17599\" \"STON/O2. 3101282\" \"113803\" ...\n $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n $ Cabin      : chr  \"\" \"C85\" \"\" \"C123\" ...\n $ Embarked   : chr  \"S\" \"C\" \"S\" \"S\" ...\n\nstr(test)\n\n\n'data.frame':   418 obs. of  11 variables:\n $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...\n $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...\n $ Name       : chr  \"Kelly, Mr. James\" \"Wilkes, Mrs. James (Ellen Needs)\" \"Myles, Mr. Thomas Francis\" \"Wirz, Mr. Albert\" ...\n $ Sex        : chr  \"male\" \"female\" \"male\" \"male\" ...\n $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...\n $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...\n $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...\n $ Ticket     : chr  \"330911\" \"363272\" \"240276\" \"315154\" ...\n $ Fare       : num  7.83 7 9.69 8.66 12.29 ...\n $ Cabin      : chr  \"\" \"\" \"\" \"\" ...\n $ Embarked   : chr  \"Q\" \"S\" \"Q\" \"S\" ...\n\n#is.na.data.frame(train)\n\n\n\nExploratory Data Analysis and Cleaning\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n\n\n#join train and test data\nltrain <- nrow(train)\nnew.test<- test%>%\n          dplyr::mutate(Survived = \"1\") # to be deleted before final predictions are made \nfull <- rbind(train, new.test) \n\n#change Pclass, Survived to factors \nfull$Survived = factor(full$Survived)\nfull$Pclass = factor(full$Pclass) \n\n#missing values\nsapply(full, function(x) sum(is.na(x)))\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n        263           0           0           0           1 \n      Cabin    Embarked \n          0           0 \n\ncolSums(full == \"\")\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n         NA           0           0           0          NA \n      Cabin    Embarked \n       1014           2 \n\n#impute missing values \nfull$Embarked[full$Embarked == \"\"] = \"C\"\nmean_age <- mean(full$Age, na.rm = T)\nsd_age <- sd(full$Age, na.rm = T) \nfull$Age[is.na(full$Age)] = runif(1, mean_age - sd_age, mean_age + sd_age)\nfull$Fare[is.na(full$Fare)] = mean(full$Fare, na.rm = T)\n\n\n\nSome plots to visualize the relationships between our label and the features At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\nsex\n\n\nggplot(full[1:ltrain,], aes(x = Sex, fill = Survived)) + geom_bar()\n\n\n\n\nMore females survived both number-wise and proportion-wise.\nPclass\n\n\nggplot(full[1:ltrain,], aes(x = Pclass, fill = Survived)) + geom_bar()\n\n\n\n\nClass 1 had the highest proportion of survivors, followed by class 2 and lastly class 3.\nEmbarked\n\n\nggplot(full[1:ltrain,], aes(x = Embarked, fill = Survived)) + geom_bar()\n\n\n\n\nThe majority of passengers who embarked at station S did not survive.\nAge\n\n\nggplot(full[1:ltrain,], aes(x = Age, fill = Survived)) + geom_histogram()\n\n\n\n\nAge seems like a good feature.Younger ages survived more.\nSibSp\n\n\nggplot(full[1:ltrain,], aes(x = SibSp, fill = Survived)) + geom_histogram()\n\n\n\n\nThose with FEWER siblings + spouses tended to survive\nParch\n\n\nggplot(full[1:ltrain,], aes(x = Parch, fill = Survived)) + geom_histogram()\n\n\n\n\nFare\n\n\nggplot(full[1:ltrain,], aes(x = Fare, fill = Survived)) + geom_histogram()\n\n\n\n\nDealing with the names\n\n\nofficers <- c(\" Capt\",' Col',' Don',' Dr',' Jonkheer',' Major',' Rev',' Sir',' the Countess')\nfull <- full %>%\n   mutate(Title_B = gsub('(.*,)|(\\\\..*)', '', Name))%>%\n   mutate(Title = dplyr::case_when(\n                      Title_B == \" Mlle\" ~ \" Miss\",\n                      Title_B == \" Ms\" ~ \" Miss\",\n                      Title_B == \" Mme\" ~ \" Mrs\",\n                      Title_B == \" Lady\" ~ \" Miss\",\n                      Title_B == \" Dona\" ~ \" Miss\",\n                      Title_B %in% officers ~ \"Officer\",\n                      TRUE ~ Title_B\n  ))\nfull$Title = factor(full$Title)\n\n#hist of titles \n\nggplot(full[1:ltrain,], aes(x = Title , fill = Survived)) + geom_bar(position =\"fill\") + ylab(\"Frequency\")\n\n\n\n\nLadies survived at a higher frequency than men. Masters survived at a higher rate than ordinary men.\nModeling with rpart and caret\n\n\n#creating train and test sets\ntrain.new <- full[1:ltrain,]\nltest <- ltrain+1\ntest.new <- full[ltest: nrow(full),]\nin.train <- createDataPartition(train.new$Survived, p=0.80,list=FALSE)\ntrainset <- train.new[in.train,]\ntestset <- train.new[-in.train,]\n\n#parallel programming \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n\n#fit the model \nset.seed(1)\nmodel <- rpart(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n               data = trainset,\n               method = \"class\")\n    \n#stop clusters \nstopCluster(cl) \n\n#plot\nrpart.plot(model) \n\n\n\n\nModel Perfomance Metrics\n\n\npredictions <- predict(model, testset, type = \"class\")\nmean(predictions == testset$Survived) # accuracy score \n\n\n[1] 0.8305085\n\nt2 <- table(predictions, testset$Survived) # contingency table \nt2 \n\n\n           \npredictions  0  1\n          0 99 20\n          1 10 48\n\nprecision <- t2[1,1]/sum(t2[1,])\nrecall <- t2[1,1]/sum(t2[,1])\nF1_score <- 2*precision*recall/(precision + recall)\nprecision\n\n\n[1] 0.8319328\n\nrecall\n\n\n[1] 0.9082569\n\nF1_score\n\n\n[1] 0.8684211\n\n#ROC\n\npROC_obj <- roc(testset$Survived, as.numeric(predictions),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\nRandom forest\n\n\nset.seed(3567)\n#parallel \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n\nrf_model <- randomForest(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n                         data = trainset,\n                         importance = T,#performance boost\n                         proximity = F,#performance boost\n                         ntrees = 120, \n                         mtry = 3\n                         )\n#stop clusters \nstopCluster(cl) \n\n#Errors \n#plot(rf_model)\nrf_model\n\n\n\nCall:\n randomForest(formula = Survived ~ Pclass + Sex + Fare + Embarked +      Title + Age, data = trainset, importance = T, proximity = F,      ntrees = 120, mtry = 3) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 3\n\n        OOB estimate of  error rate: 17.93%\nConfusion matrix:\n    0   1 class.error\n0 395  45   0.1022727\n1  83 191   0.3029197\n\n\n\npredictions_rf <- predict(rf_model, testset, type = \"class\")\nmean(predictions_rf == testset$Survived) # accuracy score \n\n\n[1] 0.8418079\n\nt2 <- table(predictions_rf, testset$Survived) # contingency table \nt2 \n\n\n              \npredictions_rf  0  1\n             0 95 14\n             1 14 54\n\nprecision_rf <- t2[1,1]/sum(t2[1,])\nrecall_rf <- t2[1,1]/sum(t2[,1])\nF1_score_rf <- 2*precision*recall/(precision + recall)\nprecision_rf\n\n\n[1] 0.8715596\n\nrecall_rf\n\n\n[1] 0.8715596\n\nF1_score_rf\n\n\n[1] 0.8684211\n\n#ROC curve\nlibrary(pROC)\npROC_obj <- roc(testset$Survived, as.numeric(predictions_rf),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-26-the-sharpe-ratio/the-sharpe-ratio_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-01-26T06:21:53-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to StatFin",
    "description": "The very first tutorial on StatFin! Hopefully the first of many...We hope you will enjoy \nreading our tutorials on Statistics and Finance!",
    "author": [
      {
        "name": "Wilson Sithole",
        "url": "https://example.com"
      },
      {
        "name": "Cephas Svosve",
        "url": "https://example.com"
      },
      {
        "name": "Blessing Nyatsanza",
        "url": "https://example.com"
      }
    ],
    "date": "2021-01-26",
    "categories": [
      "regression",
      "black scholes"
    ],
    "contents": "\n\nContents\nExploratory Data Analysis and Cleaning\nDealing with the names\nModeling with rpart and caret\nModel Perfomance Metrics\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"\n\n\n#read in the data \ntrain <- read.csv(\"~/Desktop/Kaggle_Datasets/train.csv\")\ntest <- read.csv(\"~/Desktop/Kaggle_Datasets/test.csv\")\nstr(train)\n\n\n'data.frame':   891 obs. of  12 variables:\n $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n $ Name       : chr  \"Braund, Mr. Owen Harris\" \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\" \"Heikkinen, Miss. Laina\" \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\" ...\n $ Sex        : chr  \"male\" \"female\" \"female\" \"female\" ...\n $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n $ Ticket     : chr  \"A/5 21171\" \"PC 17599\" \"STON/O2. 3101282\" \"113803\" ...\n $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n $ Cabin      : chr  \"\" \"C85\" \"\" \"C123\" ...\n $ Embarked   : chr  \"S\" \"C\" \"S\" \"S\" ...\n\nstr(test)\n\n\n'data.frame':   418 obs. of  11 variables:\n $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...\n $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...\n $ Name       : chr  \"Kelly, Mr. James\" \"Wilkes, Mrs. James (Ellen Needs)\" \"Myles, Mr. Thomas Francis\" \"Wirz, Mr. Albert\" ...\n $ Sex        : chr  \"male\" \"female\" \"male\" \"male\" ...\n $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...\n $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...\n $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...\n $ Ticket     : chr  \"330911\" \"363272\" \"240276\" \"315154\" ...\n $ Fare       : num  7.83 7 9.69 8.66 12.29 ...\n $ Cabin      : chr  \"\" \"\" \"\" \"\" ...\n $ Embarked   : chr  \"Q\" \"S\" \"Q\" \"S\" ...\n\n#is.na.data.frame(train)\n\n\n\nExploratory Data Analysis and Cleaning\n\n\n#join train and test data\nltrain <- nrow(train)\nnew.test<- test%>%\n          dplyr::mutate(Survived = \"1\") # to be deleted before final predictions are made \nfull <- rbind(train, new.test) \n\n#change Pclass, Survived to factors \nfull$Survived = factor(full$Survived)\nfull$Pclass = factor(full$Pclass) \n\n#missing values\nsapply(full, function(x) sum(is.na(x)))\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n        263           0           0           0           1 \n      Cabin    Embarked \n          0           0 \n\ncolSums(full == \"\")\n\n\nPassengerId    Survived      Pclass        Name         Sex \n          0           0           0           0           0 \n        Age       SibSp       Parch      Ticket        Fare \n         NA           0           0           0          NA \n      Cabin    Embarked \n       1014           2 \n\n#impute missing values \nfull$Embarked[full$Embarked == \"\"] = \"C\"\nmean_age <- mean(full$Age, na.rm = T)\nsd_age <- sd(full$Age, na.rm = T) \nfull$Age[is.na(full$Age)] = runif(1, mean_age - sd_age, mean_age + sd_age)\nfull$Fare[is.na(full$Fare)] = mean(full$Fare, na.rm = T)\n\n\n\nSome plots to visualize the relationships between our label and the features More females survived both number-wise and proportion-wise. Class 1 had the highest proportion of survivors, followed by class 2 and lastly class 3. The majority of passengers who embarked at station S did not survive. Age seems like a good feature.Younger ages survived more. Those with FEWER siblings + spouses tended to survive.\nDealing with the names\n\n\nofficers <- c(\" Capt\",' Col',' Don',' Dr',' Jonkheer',' Major',' Rev',' Sir',' the Countess')\nfull <- full %>%\n   mutate(Title_B = gsub('(.*,)|(\\\\..*)', '', Name))%>%\n   mutate(Title = dplyr::case_when(\n                      Title_B == \" Mlle\" ~ \" Miss\",\n                      Title_B == \" Ms\" ~ \" Miss\",\n                      Title_B == \" Mme\" ~ \" Mrs\",\n                      Title_B == \" Lady\" ~ \" Miss\",\n                      Title_B == \" Dona\" ~ \" Miss\",\n                      Title_B %in% officers ~ \"Officer\",\n                      TRUE ~ Title_B\n  ))\nfull$Title = factor(full$Title)\n\n\n\nLadies survived at a higher frequency than men. Masters survived at a higher rate than ordinary men.\nModeling with rpart and caret\n\n\n#creating train and test sets\ntrain.new <- full[1:ltrain,]\nltest <- ltrain+1\ntest.new <- full[ltest: nrow(full),]\nin.train <- createDataPartition(train.new$Survived, p=0.80,list=FALSE)\ntrainset <- train.new[in.train,]\ntestset <- train.new[-in.train,]\n#parallel programming \ncl <- makePSOCKcluster(8)\nregisterDoParallel(cl)\n#fit the model \nset.seed(1)\nmodel <- rpart(Survived ~ Pclass + Sex + Fare + Embarked + Title + Age,\n               data = trainset,\n               method = \"class\")\n#stop clusters \nstopCluster(cl) \nrpart.plot(model) \n\n\n\n\nModel Perfomance Metrics\n\n\npredictions <- predict(model, testset, type = \"class\")\nmean(predictions == testset$Survived) # accuracy score \n\n\n[1] 0.8474576\n\nt2 <- table(predictions, testset$Survived) \nt2 \n\n\n           \npredictions   0   1\n          0 101  19\n          1   8  49\n\nprecision <- t2[1,1]/sum(t2[1,])\nrecall <- t2[1,1]/sum(t2[,1])\nF1_score <- 2*precision*recall/(precision + recall)\nprecision\n\n\n[1] 0.8416667\n\nrecall\n\n\n[1] 0.9266055\n\nF1_score\n\n\n[1] 0.8820961\n\n#ROC\npROC_obj <- roc(testset$Survived, as.numeric(predictions),\n            smoothed = TRUE,\n            # arguments for ci\n            ci=TRUE, ci.alpha=0.9, stratified=FALSE,\n            # arguments for plot\n            plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,\n            print.auc=TRUE, show.thres=TRUE)\n\n\nsens.ci <- ci.se(pROC_obj)\nplot(sens.ci, type=\"shape\", col=\"lightblue\")\nplot(sens.ci, type=\"bars\")\n\n\n\n\n\n\n\n",
    "preview": "posts/welcome/welcome_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-01-26T06:23:31-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
